ðŸ”¸ OOPs Concepts
What is Object & Class?
â†’ Object = instance; Class = blueprint.

What is Inheritance?
â†’ Reuse code from parent class.

What is Polymorphism?
â†’ One task, many forms â€” overloading (compile time) & overriding (runtime).

What is Abstraction?
â†’ Hiding internal logic using abstract classes/interfaces.

What is Encapsulation?
â†’ Binding data & methods, using private fields with public getters/setters.

ðŸ”¸ Java Language Features
Why Java doesn't support operator overloading?
â†’ Simplicity, readability, no ambiguity.

Does Java support call by value?
â†’ Yes. Even object references are passed by value.

Why multiple inheritance is not supported via classes?
â†’ To avoid ambiguity (Diamond Problem). Supported via interfaces.

What is method overloading vs overriding?
â†’ Overloading: same name, different params; Overriding: same method in subclass.

Why return type overloading is not allowed?
â†’ Causes ambiguity in method resolution.

ðŸ”¸ JDK, JRE, JVM & Class Loading
JDK vs JRE vs JVM?
â†’ JDK = dev kit, JRE = runtime, JVM = executor.

What is bytecode?
â†’ .class file compiled from .java.

What is ClassLoader?
â†’ Loads classes during runtime (Class.forName() / loadClass()).

What is dynamic class loading?
â†’ Loading classes at runtime using ClassLoader.

What is path vs classpath?
â†’ path: OS-level (javac, java); classpath: where classes/jars are located.

ðŸ”¸ Memory & GC
JVM memory areas?
â†’ Heap, Stack, Class Area, PC Register, Method Area.

Heap stores?
â†’ Objects (created via new), managed by GC.

Stack stores?
â†’ Local variables, each thread has its own.

When does garbage collection run?
â†’ JVM managed, when no strong references exist.

Types of GC?
â†’ Serial, Parallel, G1 (Generational: Young, Old, Metaspace).

final vs finalize vs finally?
â†’ Const, GC cleanup method, try-catch block.

ðŸ”¸ Multithreading & Concurrency
Thread vs Process?
â†’ Thread = lightweight, shares memory; Process = independent.

Thread lifecycle?
â†’ New â†’ Runnable â†’ Running â†’ Terminated.

Thread creation methods?
â†’ Extend Thread / Implement Runnable.

join() vs sleep()?
â†’ join() waits for other thread; sleep() pauses current thread.

ExecutorService vs Thread?
â†’ Pre-created pool of threads; better for performance.

Thread-safe Map?
â†’ ConcurrentHashMap (vs SynchronizedMap - full lock).

What is Daemon thread?
â†’ Background service thread (e.g., GC).

What is shutdown hook?
â†’ Code executed before JVM shuts down.

Deadlock, Livelock, Starvation?
â†’ Resource waits causing indefinite blocking.

ðŸ”¸ Exception Handling
Checked vs Unchecked Exception?
â†’ Compile-time vs runtime.

throw vs throws?
â†’ throw: explicitly raise exception; throws: method declaration.

try-with-resources?
â†’ Auto-closeable resources.

ðŸ”¸ Collections Framework
List types?
â†’ ArrayList, LinkedList, Vector, Stack.

Set types?
â†’ HashSet, LinkedHashSet, TreeSet.

Map types?
â†’ HashMap, LinkedHashMap, TreeMap, ConcurrentHashMap.

fail-fast vs fail-safe?
â†’ Fail-fast throws ConcurrentModificationException.

Comparable vs Comparator?
â†’ Comparable: natural order; Comparator: custom logic.

ðŸ”¸ String & Wrapper
Why String is immutable?
â†’ Security, thread-safe, string pool.

String vs StringBuilder vs StringBuffer?
â†’ Immutable vs mutable; Buffer is thread-safe.

equals() vs ==?
â†’ Content vs reference comparison.

What is intern()?
â†’ Puts string in pool.

What is autoboxing?
â†’ Primitive to wrapper conversion.

ðŸ”¸ Advanced Java
What is Reflection?
â†’ Runtime class, method inspection (Class.forName()).

Serialization?
â†’ Convert object to byte stream (save/send).

Why transient?
â†’ To skip field in serialization.

Functional Interface?
â†’ Interface with 1 abstract method (e.g., Runnable, Predicate).

Lambda expression?
â†’ Compact way to implement SAM interfaces.

Stream API?
â†’ map, filter, reduce, collect, etc.

Optional class?
â†’ Avoid NullPointerException.

ðŸ”¸ Common Coding
Reverse String

Palindrome check

Find duplicates in String

Remove spaces

First non-repeating char

Check anagrams

Convert String to int (manual)

Sort array, string

ðŸ”¸ API + RestAssured Testing
Handle different environments?
â†’ Parameterize base URI.

Handle dynamic JSON?
â†’ Use JsonPath, recursive parsing.

Handle rate limiting?
â†’ Retry with exponential backoff.

Async validation?
â†’ Polling with Job ID.

429 errors?
â†’ Retry logic.

Multipart/form-data?
â†’ Use multipart support in RestAssured.

ðŸ”¸ Spring Boot + Microservices
Default/static methods in interfaces (Java 8+)

Why microservices?: Scalability, independent deployment.

Decomposition strategies: Business capability or subdomain.

Service discovery: Eureka, API gateway.

Central logging: ELK Stack / Prometheus + Grafana.
