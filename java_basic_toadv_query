object, class, inheritance, polymorphism , Abstraction , Encapsulation 
WORA !!!
utility classes 
API n runtime enviromnment 
Java api  has class loader , 
runtime env  
bytecode verifier 

 JIT compiler: .java to .class 
  how RMI and EJB help to build distributed system ?*****
  java does not support operator overloading ?why 
  java support call by value only ?
  diff between JDK , JRE , JVM ?
  jre-->classloader,classarea,heap,stack,pc,methods 


Development: Use the JDK to write, compile, and debug Java code.    javac HelloWorld.java
Deployment: Use the JRE to run Java applications on end-user machines.java HelloWorld
Execution: The JVM, part of both JRE and JDK, actually runs the Java program.

=> Dynamic class loading: 
Class.forName(String className)
ClassLoader.loadClass(String name)

path :os
classpath:jvm needs it to get class location 



  class area --->runtime constant pool , properties of class , methods related data 
  heap:---> new keyword objects , garbage collector young gen +old genc 
  stack-->local variable of class , each thread has its own stack 
execution engine:processor , interpreter , complier 

  type of variable:local, instance , static 

  computer decode those 0 n 1 with algo unicode system 
  break n continue are used in loop not in if else 
  or use switch(expression) case 1,2,3,4,default: break ;

 factorial(n)=factorial(n-1)*n 
 primeno i=2 to sqrt(n) if  given_number%i then not prime 

  import java.lang.Math ;
  random_no=Math.random();
wrapper classes : null , collection, steam , beans property 
    
    
   .java JDK .javac format  jvm execution of binary form 

when is garbage collection operation starts ? 
jvm manage it !!!
strong ref--->>new keyword 
weak ref---->>
finalize()

marking_objects---> deletion-->

Algo /ways of gARABage clean up
>>serial gc 
>>parallel gc

==>young,old,permanaentgenc /metaspace 
===================================================================
java.security 
AccessController
AuthProvider 

================================================================
why java is termed as secure lang ?
run on sandbox virtual machine
no pointer ased hacking 
packages to monitor security 
JVM/security API/security manager /exception handler /no pointer



====================================================================
object , interface , abstract class , polymorphism , encapsulation , coupling , cohesion
multiple inheitance not supported for class but why for interface 
overload vs overrid e
operator overload not supported in java 
why return type overloading is not supported 
overload main method ,
No, a static method cannot be overridden in Java
### covariant return type specifies that the return type may vary in the same direction as the subclass
###the covariant return type is implemented by allowing a subclass method to return a subtype of the superclass method's return type. 
super vs this===immediate parent vs current_instance in use 
final vs finalize vs finally
polymorphism ::: single task in different ways !!!
                >>> multiple method/implementation ::::-method overload >>>compile time??early binds --static binding
                >>> multiple method in different class :::-override >>>runtime ??dynamic binding --late binding 
                Device d= new mobile();new Phone(); new Videogame()
which is fast static binding or dynamic bindiung?

Abstract class :::need ?
abstract class vs interface "?
if i have interface , whats need of abstract class now!!!
default, static,private method can persist for interface ?
>>>>An empty interface :serializable , clonable ,... are marker interface 

to restrict the object definition ?
Access specifier -----> private , protected , default ;  abstract , sync , native ,transient

Object class!!!
The Object class provides several methods :::
toString() method:obj to string formated
hashCode() method
equals(Object obj) method
finalize() method
getClass() method
clone() method
wait(), notify() notifyAll() (Concurrency methods)


what is hashcode()::::
A common misconception about this method is that the hashCode() method returns the address of the object, which is not correct.
It converts the internal address of the object to an integer by using an algorithm.

cloning vs copying :::
class Student implements Cloneable {

    // other components

    public Student clone()
        throws CloneNotSupportedException
    {

        // call Object.clone()
        Student obj = (Student)super.clone();

        // clone mutable fields
        obj.birthDay = (Date)birthDay.clone();
    }
}
===========================================================
wrapper class:
Autoboxing: primitive types to the object
=============================================================
Reflection:::
>>> Reflection is an API that is used to examine or modify 
the behavior of methods, classes, and interfaces at runtime.
>>> forName().getClass().class
    Class.forName("claasABC")
>>> debugging the code 


===========================================================
String :::
>>>why concatination in string is slow? immutable 
>>>String::: JVM string constant pool 

@StringBuffer /@StringBuilder-----> insert,append,delete
String s4 = new String("Hello").intern(); 

compareTo():::: compare string in an order , content  , return 0,-1,1
equals() ::: content  true/false
compare()
==      ::: reference address
equalsIgnoreCase()

 String s="iamnotchangeable";  
 s.concat(" letstry");//concat() method appends the string at the end  
 System.out.println(s);//will print Sachin because strings are immutable objects  

 String s="iamnotchangeable";  
 s=s.concat("newstorecanuseme");  
  System.out.println(s);  
===================================
@JOIN ELEMENTS IN SIDE THE ARRAY

List<String> liststr = Arrays.asList("abc", "pqr", "xyz"); //List of String array  
String str = liststr.stream().collect(Collectors.joining(", ")); //performs joining operation  


s.toUpper()
s.toUpperCase()/LowerCase()
s.trim()
s.concat()
s.startsWith()/endsWith()
s.replace()
s.swapcase()
s.capitalize()
s.isdigit()
s.toCharArray()
s.contains()
s.indexOf("acilie")
s.isEmpty()
String[] words=s1.split("\\s") #whitespace spliter





============================================

String Buffer:::
>>thread safe/
>>append,insert,delete(s,e),reverse,substring


============================================
java-lang-object-throwable-excpetion/error
Exception :::checked, unchecked ,error
           checked:::compile time , unchecked::runtime ,error :not handled

Filenotfound
ArrayOutOfBound
>>specific to generic exception listing block 
>>throw vs throws 
forcefull_throwing: throw new exception();
>>exception class 
===============================================


thread vs process 
thread 
mutithreading::: multiple athread sharing cpu, memory space, resources , 
thread lifecycle:::new /runnable/running/blocked/dead

threadpriority - 1 to 10 , NORM_PRIORITY=5


start()--->run()--->setPriority()||setName()||setDaemon()--->isAlive()
dumpStack()? what it does ?
thread creation :::
>>>> By Implementing a Runnable Interface
>>>> By Extending a Thread Class


join()::: current thread is inactive till the another thread has completed its task 
sleep():::current thread is in active for a duration

Java provides a java.util.concurrent.
ScheduledExecutorService interface which is a subinterface of ExecutorService interface, 
and supports future and/or periodic execution of tasks/threads.



1. A new request from client for server create a new thread for all client request ?what is poor or good about this design ?
2. Executorservice--->threadpoolexecutor(that creates the thread before hand )
uneed to just call runnable when cpu is read for load acceptance .? design 2 what is good n poor points?

""""
Runnable r1,r2,r3,r4,r5=new Task("t1","t2","t3","t4","t5");
ExecutorService pool=Executors.newFixedThreadPool(5);
pool.execute(r1,r2,r3,r4,r5)
pool.shutdown();
""""
>>> in design 2 ... multiple threads at same time can demand for same resource deadlock ....
                    thread leakage
                    thrashing/context switching STARVATION OF CPU 


Daemon vs main thread vs user thread 
Daemon: garbage collector , low priority 

Thread vs thread group!!!
shutdownhook>::  System.exit(),kill signal 
Runtime class can control daemon , shutdown hook 





=================================================
0. os run java.exe , loads jvm lib n datastructure setup 
1. JVM uruns gc , daemon , signal dispatcher , JIT first go
2. main thread then main() is executed
..... till the main ifnisheas its last line JVM runs , n all user threads too 
....if now main is finished ...only daemon remains , daemon thread get them self stop

3. A shudden stoppage :::
on system.exit() trigger then shutdownhook is called at runtime termination occures
before jvm stops the system or a specific thread can be cutoff 

4. each thread after its run() code got executed is demanded for garbage collection 

thread synchronisation: synchronized block ,
                         monitors 
=======================================================
serialization::: 
objects are nested or complexed format , so it is converted to linear , byte-based format 
that is stream 
why cNannot we store java objects directly ?
Java objects in memory:

Have references, pointers, metadata, and object headers that are JVM-specific
May reference other objects (deep nesting, circular references)
Aren’t in a flat or portable format
So if we try to store an object directly in memory or DB:
You’d lose the structure or data


=============================================================
java collections >>>
::: collection framework : interface algorithm 

iterable ---collection ----list||queue||set 

List<Integer> l_arr=new ArrayList()|new LinkedList()|new Vector()|new Stack();
l_arr.add/.set(index,ele)/remove(ele)/remove(index)/push/pop/addAll(list)/removeAll()/clear()
l_arr.isEmpty()
l_arr.size()
Queue<String> qi=new PriorityQueue()|new ArrayDeque()

Set<Integer> s1=new HashSet<>()|new LinkedHashSet<>()| new TreeSet<>()

Map<String,Integer> map=new HashMap<>()
for(Map.Entry<String,Integer> entry:map.entrySet())

Collections.sort(list_arr)
Collections.sort(list_arr,Collections.reverseOrder())
list_arr.forEach(a->a);


Iterator<String> itr=arr_list.iterator();
while(itr.hasNext()){
sopln(itr.next())
}

Arrays.toString(array)

Deque<String> deque=new ArrayDeque<String>();
dequeu.add("abc")
offer()
poll()

Map mp=new HashMap()
mp.put(1,"abs")

====================================================

copy constructor
coerion
new vs newInstance()
functional interface : 1 abstract method 
when to use vector ::: thread sys 
concurrent hashmap
generics in java 
stream() vs parallelstream()
>>assert in debugging 
annotations 
cyclic barrier in thread 
fail fast vs fail safe 
volatile :::multithreading , visible to multiple thread 
Runnable vs callable :
lambda func 
fork() vs join()
stamedlock vs reentrancelock
transient
executpr n excecutor interface
Method handle vs reflection
functional intercae:::: consumer,supplier,predicate, function , bifunction
flatmap vs map
Comaprable :: compareTo()
Comparator()
equals vs hashcode 
Optional Class 
try-with-resource statement 
What are default and static methods in interfaces?
 4. How does Optional help avoid NullPointerException?
 5. Write a code snippet to filter a list of integers greater than 10 using streams.

 1. Difference between synchronized block and method?
 2. What are volatile and atomic variables?
 3. Explain the Executor framework.
 4. What are deadlock and livelock?
 5. How does CompletableFuture work?
1. What is Optional class in Java?
2. Java 8 features – What’s new & powerful?
3. Comparator vs Comparable
4. Abstract class vs Interface
5. What is a Functional Interface?
6. Use of the volatile keyword
7. Use of the transient keyword
8. Method Overloading vs Method Overriding
9. Checked vs Unchecked Exceptions
10. How to create an Immutable Class
11. Java Thread Lifecycle
12. == vs .equals() method
13. HashMap vs HashTable
14. What collections have you used in your project?
15. ArrayList vs LinkedList
16. How to kill a thread in Java
17. What is a Deadlock?
18. What is a Hash Collision?
19. How can we create a Singleton Design Pattern?
20. Usage of Consumer and Supplier interfaces
 Explain your current project. How long is your sprint cycle?
 🔹 Have you created a framework from scratch? What challenges did you face?
 🔹 What is the difference between StringBuffer and StringBuilder?
 🔹 Write a Java program to remove duplicate elements from an ArrayList.
 🔹 Where have you used Inheritance in your automation framework?
 🔹 How would you handle an authentication popup using Selenium?
 🔹 How many test cases have you automated in a single sprint?
 🔹 Explain the difference between RequestSpecification and ResponseSpecification in Rest Assured. Also, write code and explain it.
 🔹 What is the difference between HTTP status code 500 and 503?
















=================================================================
coding ::::
Array: 
arr.length/
int carr[]=arr.clone();    /
import java.util.Arrays;
Arrays.sort(arr);
int b[] = Arrays.copyOf(a, 3);   /
Collections.sort(arr_list);
Collections.sort(arr_list,Collections.reverseOrder());


Reverse a string
 ✅ Check if a string is a palindrome
 ✅ Find duplicate characters in a string
 ✅ Count vowels, consonants, digits, and whitespace
 ✅ Remove all whitespace from a string
 ✅ Find the first non-repeated character (recently asked in Nagarro)
 ✅ Check if two strings are anagrams
 ✅ Count occurrences of a specific character
 ✅ Convert a string to an integer (without using built-in methods)
 ✅ Check if one string contains another substring
 ✅ Replace all occurrences of a specific character
 ✅ Split a string using a delimiter (e.g., comma, space)
 ✅ Sort characters in a string alphabetically
 ✅ Find the longest word in a sentence
 ✅ Compare two strings (without using equals() method)

1) How would you configure to run parallel API tests in TestNG or JUnit?
2) How can you parameterize API tests to run against different environments (dev, QA, prod) dynamically?
3) How do you validate nested JSON responses when the structure is dynamic?
4) How do you extract and validate specific fields from an array of JSON objects in a response?
5) How would you handle API responses that return different data types dynamically for the same field?
6) Given an API that returns paginated results, how would you validate data consistency across multiple pages?
7) If an API rate limits requests (e.g., throttling at 100 requests per minute), how would you implement retries with exponential backoff ?
8) How to handle APIs that randomly return 429 (Too Many Requests) errors?
9) If an API triggers an asynchronous process (e.g., starts a batch job and returns a Job ID), how would you validate its completion?
10) How do you handle APIs that return multipart/form-data responses?
11) How to simulate 1000 concurrent users hitting an API?
12) How would you integrate Rest Assured with JMeter or Gatling for performance testing?
13) How can you automate testing for unauthorized access scenarios using Rest Assured?

class casting vs type casting
sam interface 



How does HashMap work internally in Java?
HashMap stores key-value pairs.
Uses hashCode() to compute index (bucket).

In case of collisions, it uses a LinkedList or Tree (since Java 8) to store multiple entries in the same bucket.

Uses equals() to compare keys in the same bucket.

🧪 Example:
Map<String, String> map = new HashMap<>();
map.put("name", "Ranjit");
map.put("name", "Appukutti"); // Overwrites previous value
🧩 Output: Final value for "name" is "Appukutti".

✅ 2. What is the difference between == and .equals() in Java?
🧠 Key Concept: Object comparison

🛠️ Explanation:

== checks reference equality (memory address).

.equals() checks logical equality (value).

String a = new String("Java");
String b = new String("Java");

System.out.println(a == b); // false
System.out.println(a.equals(b)); // true
✅ Use .equals() for comparing object contents.

✅ 3. Write a program to reverse a string without using built-in functions.
🧠 Key Concept: String manipulation

public class ReverseString {
 public static void main(String[] args) {
 String input = "Tec Skool";
 String reversed = "";
 for (int i = input.length() - 1; i >= 0; i--) {
 reversed += input.charAt(i);
 }
 System.out.println("Reversed: " + reversed);
 }
}
💡 Tip: Use StringBuilder for better performance in real-world apps.

✅ 4. Explain the difference between LinkedList and ArrayList
ArrayList Example
import java.util.ArrayList;

public class ArrayListExample {
 public static void main(String[] args) {
 ArrayList<String> list = new ArrayList<>();
 list.add("Apple");
 list.add("Banana");
 list.add("Orange");

 System.out.println("Element at index 1: " + list.get(1)); // Fast read
 }
}

✅ LinkedList Example
import java.util.LinkedList;

public class LinkedListExample {
 public static void main(String[] args) {
 LinkedList<String> list = new LinkedList<>();
 list.add("Dog");
 list.add("Cat");
 list.addFirst("Rabbit"); // Fast insert at beginning

 System.out.println("First Element: " + list.getFirst());
 }
}
These examples show:
ArrayList is best when you read by index.
LinkedList is useful when you add/remove items frequently, especially at the start or end

✅ 5. What is the difference between final and finally?
final int a = 10; // value cannot be changed.
finally — Block that always executes after try-catch.

try {
 // risky code
} finally {
 // clean-up
}



Rare Java + Spring Boot + Microservices Questions , with Clear understanding Answers.

1. What moves a thread from Runnable to Running? What does Thread.yield() do?
 Ans: When a thread is in the Runnable state, it means it’s ready to run but waiting for the CPU.
 The CPU scheduler (part of the Operating System) decides when it should move to Running. The JVM doesn’t control when exactly it runs.
Thread.yield() tells the thread scheduler, “I’m willing to let other threads run first.” But it’s just a suggestion ,the thread might continue running if no other thread is ready.
Example:
 Suppose you have multiple background tasks running. You can call yield() to let another thread finish first, especially in multitasking environments.

2. Why did Java 8 introduce default and static methods in interfaces?
Ans: Before Java 8, interfaces could only have method declarations — no method bodies.
 Java 8 introduced default and static methods to allow interfaces to evolve without breaking old code.
This helped:
Add new features (like forEach() in Iterable) without changing every implementation.
Provide common reusable logic in interfaces.
Use Case Example:
 If you have an interface Vehicle, you can add a default void start() method — existing classes like Car or Bike don’t need to change to get this behavior. 

3. SynchronizedMap vs ConcurrentHashMap — Which is better in multi-threaded apps?
Ans: SynchronizedMap locks the entire map during any operation. It is simple but slow in multi-threaded apps.
ConcurrentHashMap divides the map into segments and locks only the part being used. This makes it much faster in concurrent environments.
Use Case Example:
 If multiple threads update and read from a shared cache or map, use ConcurrentHashMap for better performance and safety. 

4. What is the Decomposition Pattern in Microservices?
Ans: It is a method of breaking down a large monolithic application into smaller, independent microservices.
 Each service handles a specific business function, such as Orders, Payments, or Notifications.
Common strategies:
Decomposition by Business Capability
Decomposition by Subdomain (from Domain-Driven Design
Use Case Example:
 In an e-commerce app, splitting the system into services like ProductService, CartService, PaymentService helps develop, deploy, and scale them independently.

5. How do you monitor logs in Spring Boot applications?
Ans: Spring Boot provides built-in support using Spring Boot Actuator to expose metrics and health endpoints.
 For centralized logging and monitoring:
Use tools like the ELK stack (Elasticsearch, Logstash, Kibana).
Or Prometheus and Grafana for metrics and alerting.
Use Case Example:
 In production, instead of checking logs on each server, logs are sent to Elasticsearch and visualized in Kibana. This helps in tracking errors, request flows, and app performance from one place.
  


    
    
  
  
  
  
  
  
  aslist vs oflist
  char[] char_array = strings.toCharArray()
   
  
  
